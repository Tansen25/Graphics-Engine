
//Cell Shader
//Vertex Shader
#version 330

//Incoming per vertex
in vec4 vertex;
in vec3 vNormal;
in vec4 texture0;

//Set per batch
uniform vec3 lightPosition;

uniform mat4 mvp;
uniform mat4 mv;
uniform mat3 normal;

//Outgoing to the fragment shader
smooth out float textureCoordinate;

void main(void)
{
	//Get surface normal in eye coordinates
	vec3 eyeNormal = normal * vNormal;

	//Get vertex position in eye coordinates
	vec4 position4 = mv * vertex;
	vec3 position3 = position4.xyz / position4.w;

	//Get vector to light source
	vec3 lightDir = normalize(lightPosition - position3);

	//Dot product gives us the diffuse intensity
	float t = dot(eyeNormal, lightDir);
	textureCoordinate = max(0.0, t);

	//Transform the geometry
	gl_Position = mvp * vertex;
}